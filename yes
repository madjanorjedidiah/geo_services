# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.contrib.gis.db import models


class DistrictCapitals(models.Model):
    geom = models.PointField(blank=True, null=True)
    shape_leng = models.FloatField(blank=True, null=True)
    shape_area = models.FloatField(blank=True, null=True)
    adm2_en = models.CharField(max_length=50, blank=True, null=True)
    adm2_pcode = models.CharField(max_length=50, blank=True, null=True)
    adm2_ref = models.CharField(max_length=50, blank=True, null=True)
    adm2alt1en = models.CharField(max_length=50, blank=True, null=True)
    adm2alt2en = models.CharField(max_length=50, blank=True, null=True)
    adm1_en = models.CharField(max_length=50, blank=True, null=True)
    adm1_pcode = models.CharField(max_length=50, blank=True, null=True)
    adm0_en = models.CharField(max_length=50, blank=True, null=True)
    adm0_pcode = models.CharField(max_length=50, blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    validon = models.DateField(blank=True, null=True)
    validto = models.DateField(blank=True, null=True)
    point_x = models.FloatField(blank=True, null=True)
    point_y = models.FloatField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'district_capitals'


class Districts(models.Model):
    id = models.BigIntegerField(primary_key=True)
    geom = models.MultiPolygonField(srid=32630, blank=True, null=True)
    region = models.CharField(max_length=50, blank=True, null=True)
    district_n = models.CharField(max_length=50, blank=True, null=True)
    region_id = models.IntegerField(blank=True, null=True)
    budget = models.FloatField(blank=True, null=True)
    number_of_providers = models.IntegerField(blank=True, null=True)
    priority = models.CharField(max_length=15, blank=True, null=True)
    referred_cases = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'districts'


class Regions(models.Model):
    id = models.BigIntegerField(primary_key=True)
    geom = models.MultiPolygonField(srid=32630, blank=True, null=True)
    region = models.CharField(max_length=50, blank=True, null=True)
    budget = models.FloatField(blank=True, null=True)
    number_of_districts = models.IntegerField(blank=True, null=True)
    priority = models.CharField(max_length=15, blank=True, null=True)
    number_of_providers = models.IntegerField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'regions'
